service: frelancer-test-2-api

# Use the serverless-webpack plugin to transpile ES6
plugins:
  - serverless-webpack
  - serverless-offline

# serverless-webpack configuration
# Enable auto-packing of external modules
custom:
  # Our stage is based on what is passed in when running serverless
  # commands. Or fallsback to what we have set in the provider section.
  stage: ${opt:stage, self:provider.stage}
  # Set the table name here so we can use it while testing locally
  tableName: ${self:custom.stage}-notes
  # Set our DynamoDB throughput for prod and all other non-prod stages.
  tableThroughputs:
    prod: 5
    default: 1
  tableThroughput: ${self:custom.tableThroughputs.${self:custom.stage}, self:custom.tableThroughputs.default}
  # Load our webpack config
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  # Load our secret environment variables based on the current stage.
  # Fallback to default if it is not in prod.
  environment: ${file(env.yml):${self:custom.stage}, file(env.yml):default}

provider:
  name: aws
  runtime: nodejs8.10
  stage: dev
  region: us-east-1


  # These environment variables are made available to our functions
  # under process.env.
  environment:
    tableName: ${self:custom.tableName}
    stripeSecretKey: ${self:custom.environment.stripeSecretKey}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      # Restrict our IAM role permissions to
      # the specific table for the stage
      Resource:
        - "Fn::GetAtt": [ NotesTable, Arn ]

functions:
  # Defines an HTTP API endpoint that calls the main function in create.js
  # - path: url path is /notes
  # - method: POST request
  # - cors: enabled CORS (Cross-Origin Resource Sharing) for browser cross
  #     domain api call
  # - authorizer: authenticate using the AWS IAM role
  create:
    handler: create.main
    events:
      - http:
          path: notes
          method: post
          cors: true
          authorizer: aws_iam

  get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: get.main
    events:
      - http:
          path: notes/{id}
          method: get
          cors: true
          authorizer: aws_iam

  list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: list.main
    events:
      - http:
          path: notes
          method: get
          cors: true
          authorizer: aws_iam

  update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: update.main
    events:
      - http:
          path: notes/{id}
          method: put
          cors: true
          authorizer: aws_iam

  delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: delete.main
    events:
      - http:
          path: notes/{id}
          method: delete
          cors: true
          authorizer: aws_iam
  
  activitylog-create:
    handler: activitylog-create.main
    events:
      - http:
          path: activitylog
          method: post
          cors: true
          authorizer: aws_iam

  activitylog-list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: activitylog-list.main
    events:
      - http:
          path: activitylog
          method: get
          cors: true
          authorizer: aws_iam
   
  
  company-create:
    handler: company-create.main
    events:
      - http:
          path: company
          method: post
          cors: true
          authorizer: aws_iam


  company-get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: company-get.main
    events:
      - http:
          path: company/{id}
          method: get
          cors: true
          authorizer: aws_iam

  company-list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: company-list.main
    events:
      - http:
          path: company
          method: get
          cors: true
          authorizer: aws_iam

  company-update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /company/{id}
    # - method: PUT request
    handler: company-update.main
    events:
      - http:
          path: company/{id}
          method: put
          cors: true
          authorizer: aws_iam
  
  documents-create:
    handler: documents-create.main
    events:
      - http:
          path: documents
          method: post
          cors: true
          authorizer: aws_iam

  documents-get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: documents-get.main
    events:
      - http:
          path: documents/{id}
          method: get
          cors: true
          authorizer: aws_iam

  documents-list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: documents-list.main
    events:
      - http:
          path: documents
          method: get
          cors: true
          authorizer: aws_iam

  documents-update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /documents/{id}
    # - method: PUT request
    handler: documents-update.main
    events:
      - http:
          path: documents/{id}
          method: put
          cors: true
          authorizer: aws_iam

  documents-delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /notes/{id}
    # - method: DELETE request
    handler: documents-delete.main
    events:
      - http:
          path: documents/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  documents-api-create:
    handler: documents-api-create.main
    events:
      - http:
          path: documents-api
          method: post
          cors: true
          authorizer: aws_iam

  email2:
    handler: email.main
    events:
      - http:
          path: email
          method: post
          cors: true
          authorizer: aws_iam

  metadata-list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: metadata-list.main
    events:
      - http:
          path: metadata
          method: get
          cors: true
          authorizer: aws_iam
  
  metadata-delete:
    # Defines an HTTP API endpoint that calls the main function in delete.js
    # - path: url path is /metadata/{id}
    # - method: DELETE request
    handler: metadata-delete.main
    events:
      - http:
          path: metadata/{id}
          method: delete
          cors: true
          authorizer: aws_iam

  newsfeed-list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: newsfeed-list.main
    events:
      - http:
          path: newsfeed
          method: get
          cors: true
          authorizer: aws_iam

  preview-create:
    handler: preview-create.main
    events:
      - http:
          path: preview
          method: post
          cors: true
          authorizer: aws_iam

  preview-pdf:
    handler: preview-pdf.main
    events:
      - http:
          path: preview/pdf
          method: post
          cors: true
          authorizer: aws_iam
  
  syscompany-create:
    handler: syscompany-create.main
    events:
      - http:
          path: syscompany
          method: post
          cors: true
          authorizer: aws_iam

  settings-create:
    handler: settings-create.main
    events:
      - http:
          path: settings
          method: post
          cors: true
          authorizer: aws_iam

  settings-list:
    # Defines an HTTP API endpoint that calls the main function in list.js
    # - path: url path is /notes
    # - method: GET request
    handler: settings-list.main
    events:
      - http:
          path: settinds
          method: get
          cors: true
          authorizer: aws_iam

  settings-update:
    # Defines an HTTP API endpoint that calls the main function in update.js
    # - path: url path is /notes/{id}
    # - method: PUT request
    handler: settings-update.main
    events:
      - http:
          path: settings/{id}
          method: put
          cors: true
          authorizer: aws_iam

  syscompany-get:
    # Defines an HTTP API endpoint that calls the main function in get.js
    # - path: url path is /notes/{id}
    # - method: GET request
    handler: syscompany-get.main
    events:
      - http:
          path: syscompany/{id}
          method: get
          cors: true
          authorizer: aws_iam
          

# Create our resources with separate CloudFormation templates
resources:
    # S3
  - ${file(resources/s3-bucket.yml)}
    # Cognito
  - ${file(resources/cognito-user-pool.yml)}
  - ${file(resources/cognito-identity-pool.yml)}